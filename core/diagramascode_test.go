package core

import "testing"

func Test_diagramGraph2plantUMLCode(t *testing.T) {
	type args struct {
		graph DiagramGraph
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "default graph",
			args: args{
				graph: DiagramGraph{},
			},
			want: `@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
footer "generated by diagramastext.dev - %date('yyyy-MM-dd')"
@enduml`,
		},
		{
			name: "graph: custom footer",
			args: args{
				graph: DiagramGraph{
					Footer: `  foobar
"bazqux
quxx"  `,
				},
			},
			want: `@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
footer "foobar\n"bazqux\nquxx"
@enduml`,
		},
		{
			name: "graph: custom footer and title",
			args: args{
				graph: DiagramGraph{
					Title:  "foo",
					Footer: "bar",
				},
			},
			want: `@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
footer "bar"
title "foo"
@enduml`,
		},
	}
	for _, tt := range tests {
		t.Run(
			tt.name, func(t *testing.T) {
				if got := diagramGraph2plantUMLCode(tt.args.graph); got != tt.want {
					t.Errorf("diagramGraph2plantUMLCode() = %v, want %v", got, tt.want)
				}
			},
		)
	}
}

func Test_diagramNode2UML(t *testing.T) {
	type args struct {
		n Node
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "ID only",
			args: args{
				n: Node{
					ID: "foo",
				},
			},
			want: `Container(foo, "foo")`,
		},
		{
			name: "ID only, db",
			args: args{
				n: Node{
					ID:         "foo",
					IsDatabase: true,
				},
			},
			want: `ContainerDb(foo, "foo")`,
		},
		{
			name: "ID only, queue",
			args: args{
				n: Node{
					ID:      "foo",
					IsQueue: true,
				},
			},
			want: `ContainerQueue(foo, "foo")`,
		},
		{
			name: "ID only, queue+db",
			args: args{
				n: Node{
					ID:         "foo",
					IsQueue:    true,
					IsDatabase: true,
				},
			},
			want: `Container(foo, "foo")`,
		},
		{
			name: "ID only, ext",
			args: args{
				n: Node{
					ID:       "foo",
					External: true,
				},
			},
			want: `Container_Ext(foo, "foo")`,
		},
		{
			name: "ID only, ext db",
			args: args{
				n: Node{
					ID:         "foo",
					External:   true,
					IsDatabase: true,
				},
			},
			want: `ContainerDb_Ext(foo, "foo")`,
		},
		{
			name: "core logic example",
			args: args{
				n: Node{
					ID:         "0",
					Label:      "Core Logic",
					Technology: "Go Application",
				},
			},
			want: `Container(0, "Core Logic", "Go Application")`,
		},
	}
	for _, tt := range tests {
		t.Run(
			tt.name, func(t *testing.T) {
				if got := diagramNode2UML(tt.args.n); got != tt.want {
					t.Errorf("diagramNode2UML() = %v, want %v", got, tt.want)
				}
			},
		)
	}
}
