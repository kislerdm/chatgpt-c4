// package defines diagram as code using the graph input
package core

import "strings"

// DiagramGraph defines the diagram graph.
type DiagramGraph struct {
	Title  string  `json:"title"`
	Footer string  `json:"footer"`
	Nodes  []*Node `json:"nodes"`
	Links  []*Link `json:"links"`
}

// Node diagram's definition node.
type Node struct {
	ID         string `json:"id"`
	Label      string `json:"label"`
	Group      string `json:"group"`
	Technology string `json:"technology"`
	External   bool   `json:"external"`
	IsQueue    bool   `json:"is_queue"`
	IsDatabase bool   `json:"is_database"`
}

// Link diagram's definition link.
type Link struct {
	From       string `json:"from"`
	To         string `json:"to"`
	Direction  string `json:"direction"`
	Label      string `json:"label"`
	Technology string `json:"technology"`
}

func trimQuotes(s string) string {
	if s[:1] == `"` {
		s = s[1:]
	}
	if s[len(s)-1:] == `"` {
		s = s[:len(s)-1]
	}
	return s
}

func diagramFooter2UML(graph DiagramGraph) string {
	if graph.Footer == "" {
		return `footer "generated by diagramastext.dev - %date('yyyy-MM-dd')"`
	}
	return `footer "` + stringCleaner(graph.Footer) + `"`
}

func diagramNode2UML(n Node) string {
	o := "Container"

	switch n.IsQueue && n.IsDatabase {
	case true:
	case false:
		if n.IsQueue {
			o += "Queue"
		}

		if n.IsDatabase {
			o += "Db"
		}
	}

	if n.External {
		o += "_Ext"
	}

	o += "(" + n.ID

	label := n.Label
	if label == "" {
		label = n.ID
	}
	o += `, "` + stringCleaner(label) + `"`

	if n.Technology != "" {
		o += `, "` + stringCleaner(n.Technology) + `"`
	}

	o += ")"

	return o
}

func diagramLink2UML(l Link) string {
	o := "Rel"

	if d := linkDirection(l.Direction); d != "" {
		o += "_" + d
	}

	o += "(" + l.From + ", " + l.To

	if l.Label != "" {
		o += ", " + l.Label
	}

	if l.Technology != "" {
		o += ", " + l.Technology
	}

	o += ")"

	return o
}

func linkDirection(s string) string {
	switch s := strings.ToUpper(s); s {
	case "LR":
		return "R"
	case "RL":
		return "L"
	case "TD":
		return "D"
	case "DT":
		return "U"
	default:
		return ""
	}
}

func stringCleaner(s string) string {
	s = strings.TrimSpace(s)
	s = trimQuotes(s)
	s = strings.ReplaceAll(s, "\n", "\\n")
	return s
}

// diagramGraph2plantUMLCode function to "transpile" the diagram definition graph to plantUML code as string.
func diagramGraph2plantUMLCode(graph DiagramGraph) string {
	o := `@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml`

	o += "\n" + diagramFooter2UML(graph)

	if graph.Title != "" {
		o += "\n" + diagramTitle2UML(graph)
	}

	o += "\n@enduml"

	return o
}

func diagramTitle2UML(graph DiagramGraph) string {
	return `title "` + stringCleaner(graph.Title) + `"`
}
