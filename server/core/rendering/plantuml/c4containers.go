package plantuml

import (
	"bytes"
	"errors"
)

// C4Containers defines the containers and relations for C4 Container diagram.
type C4Containers struct {
	Containers []*Container
	Rels       []*Rel
	Title      string
	Footer     string
	WithLegend bool
}

func writeStrings(w bytes.Buffer, s ...string) error {
	for _, el := range s {
		if _, err := w.WriteString(el); err != nil {
			return err
		}
	}
	return nil
}

func (c C4Containers) Marshal() ([]byte, error) {
	if len(c.Containers) == 0 {
		return nil, errors.New("no containers found")
	}

	var o bytes.Buffer

	if err := writeStrings(
		o,
		`@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml`,
		"\n", dslFooter(c.Footer),
		"\n", dslTitle(c.Title),
	); err != nil {
		return nil, err
	}

	groups := map[string][]string{}
	for _, n := range c.Containers {
		containerStr, err := dslContainer(n)
		if err != nil {
			return nil, err
		}

		if _, ok := groups[n.System]; !ok {
			groups[n.System] = []string{}
		}
		groups[n.System] = append(groups[n.System], containerStr)
	}

	if len(groups) > 0 {
		if err := writeStrings(o, dslSystems(o, groups)); err != nil {
			return nil, err
		}
	}

	for _, l := range c.Rels {
		if err := dslRelation(o, l); err != nil {
			return nil, err
		}
		if err := writeStrings(o, "\n"); err != nil {
			return nil, err
		}
	}

	return o.Bytes(), nil
}

func dslRelation(o bytes.Buffer, l *Rel) error {
	panic("todo")
}

func dslSystems(o bytes.Buffer, groups map[string][]string) string {
	panic("todo")
}

func dslContainerType(o bytes.Buffer, n *Container) error {
	tag := "Container"
	if n.IsUser {
		tag = "User"
	}
	if err := writeStrings(o, tag); err != nil {
		return err
	}

	switch n.IsQueue && n.IsDatabase {
	case true:
	case false:
		if n.IsQueue {
			if err := writeStrings(o, "Queue"); err != nil {
				return err
			}
		}

		if n.IsDatabase {
			if err := writeStrings(o, "Db"); err != nil {
				return err
			}
		}
	}

	if n.IsExternal {
		if err := writeStrings(o, "_Ext"); err != nil {
			return err
		}
	}

	return nil
}

func dslContainer(n *Container) (string, error) {
	if n.ID == "" {
		return "", errors.New("container must be identified: 'id' attribute")
	}

	var o bytes.Buffer

	// container type
	if err := dslContainerType(o, n); err != nil {
		return "", err
	}

	// container definition
	if err := writeStrings(o, "("); err != nil {
		return "", err
	}

	if err := writeStrings(o, n.ID); err != nil {
		return "", err
	}

	label := n.Label
	if label == "" {
		label = n.ID
	}

	if err := writeStrings(o, `, "`, stringCleaner(label), `"`); err != nil {
		return "", err
	}

	if n.Technology != "" {
		if err := writeStrings(o, `, "`, stringCleaner(n.Technology), `"`); err != nil {
			return "", err
		}
	}

	if err := writeStrings(o, ")"); err != nil {
		return "", err
	}

	return o.String(), nil
}

// Container C4 container definition.
type Container struct {
	ID          string
	Label       string
	Technology  string
	Description string
	System      string
	IsQueue     bool
	IsDatabase  bool
	IsUser      bool
	IsExternal  bool
}

// Rel containers relations.
type Rel struct {
	From        string
	To          string
	Technology  string
	Description string
}

func dslFooter(footer string) string {
	if footer == "" {
		return `footer "generated by diagramastext.dev - %date('yyyy-MM-dd')"`
	}
	return `footer "` + stringCleaner(footer) + `"`
}

func dslTitle(title string) string {
	if title == "" {
		return ""
	}
	return `title "` + stringCleaner(title) + `"`
}
